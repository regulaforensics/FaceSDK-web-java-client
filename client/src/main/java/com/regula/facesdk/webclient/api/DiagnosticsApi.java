/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 5.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.api;

import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;

import java.util.Map;

public class DiagnosticsApi extends com.regula.facesdk.webclient.gen.api.DiagnosticsApi {

    public DiagnosticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiagnosticsApi(ApiClient apiClient) {
        super(apiClient);
    }

    @Override
    public ApiClient getApiClient() {
        return super.getApiClient();
    }

    @Override
    public void setApiClient(ApiClient apiClient) {
        super.setApiClient(apiClient);
    }

    @Override
    public int getHostIndex() {
        return super.getHostIndex();
    }

    @Override
    public void setHostIndex(int hostIndex) {
        super.setHostIndex(hostIndex);
    }

    @Override
    public String getCustomBaseUrl() {
        return super.getCustomBaseUrl();
    }

    @Override
    public void setCustomBaseUrl(String customBaseUrl) {
        super.setCustomBaseUrl(customBaseUrl);
    }

    @Override
    public okhttp3.Call readinessCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        return super.readinessCall(xRequestID, _callback);
    }

    @Override
    public Map<String, Object> readiness(String xRequestID) throws ApiException {
        return super.readiness(xRequestID);
    }

    @Override
    public ApiResponse<Map<String, Object>> readinessWithHttpInfo(String xRequestID) throws ApiException {
        return super.readinessWithHttpInfo(xRequestID);
    }

    @Override
    public okhttp3.Call readinessAsync(String xRequestID, final ApiCallback<Map<String, Object>> _callback) throws ApiException {
        return super.readinessAsync(xRequestID, _callback);
    }
}
