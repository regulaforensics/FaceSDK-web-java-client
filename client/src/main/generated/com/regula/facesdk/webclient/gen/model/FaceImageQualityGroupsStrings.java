/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Face image quality group types for face image quality assessment.
 */
@JsonAdapter(FaceImageQualityGroupsStrings.Adapter.class)
public enum FaceImageQualityGroupsStrings {
  
  IMAGE_CHARACTERISTICS("ImageCharacteristics"),
  
  HEAD_SIZE_AND_POSITIONS("HeadSizeAndPosition"),
  
  FACE_QUALITY("FaceQuality"),
  
  EYES_CHARACTERISTICS("EyesCharacteristics"),
  
  SHADOWS_AND_LIGHTNING("ShadowsAndLightning"),
  
  POSE_AND_EXPRESSION("PoseAndExpression"),
  
  HEAD_OCCLUSION("HeadOcclusion"),
  
  BACKGROUND("Background");

  private String value;

  FaceImageQualityGroupsStrings(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FaceImageQualityGroupsStrings fromValue(String value) {
    for (FaceImageQualityGroupsStrings b : FaceImageQualityGroupsStrings.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FaceImageQualityGroupsStrings> {
    @Override
    public void write(final JsonWriter jsonWriter, final FaceImageQualityGroupsStrings enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FaceImageQualityGroupsStrings read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FaceImageQualityGroupsStrings.fromValue(value);
    }
  }
}

