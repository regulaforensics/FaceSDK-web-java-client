/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FaceQualityConfigName
 */
@JsonAdapter(FaceQualityConfigName.Adapter.class)
public enum FaceQualityConfigName {
  
  IMAGE_WIDTH("ImageWidth"),
  
  IMAGE_HEIGHT("ImageHeight"),
  
  IMAGE_WIDTH_TO_HEIGHT("ImageWidthToHeight"),
  
  IMAGE_CHANNELS_NUMBER("ImageChannelsNumber"),
  
  FACE_MID_POINT_HORIZONTAL_POSITION("FaceMidPointHorizontalPosition"),
  
  FACE_MID_POINT_VERTICAL_POSITION("FaceMidPointVerticalPosition"),
  
  HEAD_WIDTH_RATIO("HeadWidthRatio"),
  
  HEAD_HEIGHT_RATIO("HeadHeightRatio"),
  
  EYES_DISTANCE("EyesDistance"),
  
  YAW("Yaw"),
  
  PITCH("Pitch"),
  
  ROLL("Roll"),
  
  BLUR_LEVEL("BlurLevel"),
  
  NOISE_LEVEL("NoiseLevel"),
  
  EYE_RIGHT_CLOSED("EyeRightClosed"),
  
  EYE_LEFT_CLOSED("EyeLeftClosed"),
  
  EYE_RIGHT_OCCLUDED("EyeRightOccluded"),
  
  EYE_LEFT_OCCLUDED("EyeLeftOccluded"),
  
  EYES_RED("EyesRed"),
  
  EYE_RIGHT_COVERED_WITH_HAIR("EyeRightCoveredWithHair"),
  
  EYE_LEFT_COVERED_WITH_HAIR("EyeLeftCoveredWithHair"),
  
  OFF_GAZE("OffGaze"),
  
  FACE_DYNAMIC_RANGE("FaceDynamicRange"),
  
  UNNATURAL_SKIN_TONE("UnnaturalSkinTone"),
  
  TOO_DARK("TooDark"),
  
  TOO_LIGHT("TooLight"),
  
  FACE_GLARE("FaceGlare"),
  
  SHADOWS_ON_FACE("ShadowsOnFace"),
  
  DARK_GLASSES("DarkGlasses"),
  
  REFLECTION_ON_GLASSES("ReflectionOnGlasses"),
  
  FRAMES_TOO_HEAVY("FramesTooHeavy"),
  
  FACE_OCCLUDED("FaceOccluded"),
  
  HEAD_COVERING("HeadCovering"),
  
  BACKGROUND_UNIFORMITY("BackgroundUniformity"),
  
  SHADOWS_ON_BACKGROUND("ShadowsOnBackground"),
  
  OTHER_FACES("OtherFaces"),
  
  SHOULDERS_POSE("ShouldersPose"),
  
  EXPRESSION_LEVEL("ExpressionLevel"),
  
  MOUTH_OPEN("MouthOpen"),
  
  CONTACT_LENSES("ContactLenses"),
  
  FOREHEAD_COVERING("ForeheadCovering"),
  
  SMILE("Smile");

  private String value;

  FaceQualityConfigName(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FaceQualityConfigName fromValue(String value) {
    for (FaceQualityConfigName b : FaceQualityConfigName.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FaceQualityConfigName> {
    @Override
    public void write(final JsonWriter jsonWriter, final FaceQualityConfigName enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FaceQualityConfigName read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FaceQualityConfigName.fromValue(value);
    }
  }
}

