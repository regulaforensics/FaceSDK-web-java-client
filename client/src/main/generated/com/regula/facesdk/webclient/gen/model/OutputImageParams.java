/*
 * Regula FaceSDK Web API
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.facesdk.webclient.gen.model.Crop;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Whether to process the uploaded image according to the indicated settings.
 */
@ApiModel(description = "Whether to process the uploaded image according to the indicated settings.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OutputImageParams {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private List<Integer> backgroundColor = null;

  public static final String SERIALIZED_NAME_CROP = "crop";
  @SerializedName(SERIALIZED_NAME_CROP)
  private Crop crop;

  public OutputImageParams() { 
  }

  public OutputImageParams backgroundColor(List<Integer> backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

  public OutputImageParams addBackgroundColorItem(Integer backgroundColorItem) {
    if (this.backgroundColor == null) {
      this.backgroundColor = new ArrayList<Integer>();
    }
    this.backgroundColor.add(backgroundColorItem);
    return this;
  }

   /**
   * The RGB value of a color for filling background behind a person&#39;s silhouette and for aligning the image.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[128,128,128]", value = "The RGB value of a color for filling background behind a person's silhouette and for aligning the image.")

  public List<Integer> getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(List<Integer> backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public OutputImageParams crop(Crop crop) {
    
    this.crop = crop;
    return this;
  }

   /**
   * Get crop
   * @return crop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Crop getCrop() {
    return crop;
  }


  public void setCrop(Crop crop) {
    this.crop = crop;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputImageParams outputImageParams = (OutputImageParams) o;
    return Objects.equals(this.backgroundColor, outputImageParams.backgroundColor) &&
        Objects.equals(this.crop, outputImageParams.crop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, crop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputImageParams {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    crop: ").append(toIndentedString(crop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

