/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.facesdk.webclient.gen.api;

import com.google.gson.reflect.TypeToken;
import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;
import com.regula.facesdk.webclient.Pair;
import com.regula.facesdk.webclient.gen.model.Group;
import com.regula.facesdk.webclient.gen.model.GroupPage;
import com.regula.facesdk.webclient.gen.model.GroupToCreate;
import com.regula.facesdk.webclient.gen.model.GroupsGroupIdPersons;
import com.regula.facesdk.webclient.gen.model.UpdateGroup;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
  private ApiClient localVarApiClient;

  public GroupApi() {
    this(Configuration.getDefaultApiClient());
  }

  public GroupApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for createGroup
   *
   * @param groupToCreate Group to create (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createGroupCall(GroupToCreate groupToCreate, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = groupToCreate;

    // create path and map variables
    String localVarPath = "/api/groups";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createGroupValidateBeforeCall(
      GroupToCreate groupToCreate, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'groupToCreate' is set
    if (groupToCreate == null) {
      throw new ApiException(
          "Missing the required parameter 'groupToCreate' when calling createGroup(Async)");
    }

    okhttp3.Call localVarCall = createGroupCall(groupToCreate, _callback);
    return localVarCall;
  }

  /**
   * Create group
   *
   * @param groupToCreate Group to create (required)
   * @return Group
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public Group createGroup(GroupToCreate groupToCreate) throws ApiException {
    ApiResponse<Group> localVarResp = createGroupWithHttpInfo(groupToCreate);
    return localVarResp.getData();
  }

  /**
   * Create group
   *
   * @param groupToCreate Group to create (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Group> createGroupWithHttpInfo(GroupToCreate groupToCreate)
      throws ApiException {
    okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupToCreate, null);
    Type localVarReturnType = new TypeToken<Group>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create group (asynchronously)
   *
   * @param groupToCreate Group to create (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createGroupAsync(
      GroupToCreate groupToCreate, final ApiCallback<Group> _callback) throws ApiException {

    okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupToCreate, _callback);
    Type localVarReturnType = new TypeToken<Group>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for deleteGroup
   *
   * @param groupId Group id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteGroupCall(BigDecimal groupId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/groups/{group_id}"
            .replaceAll(
                "\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteGroupValidateBeforeCall(
      BigDecimal groupId, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          "Missing the required parameter 'groupId' when calling deleteGroup(Async)");
    }

    okhttp3.Call localVarCall = deleteGroupCall(groupId, _callback);
    return localVarCall;
  }

  /**
   * Delete group
   *
   * @param groupId Group id (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void deleteGroup(BigDecimal groupId) throws ApiException {
    deleteGroupWithHttpInfo(groupId);
  }

  /**
   * Delete group
   *
   * @param groupId Group id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> deleteGroupWithHttpInfo(BigDecimal groupId) throws ApiException {
    okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete group (asynchronously)
   *
   * @param groupId Group id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteGroupAsync(BigDecimal groupId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllGroups
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Group name keywords (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllGroupsCall(
      BigDecimal page, BigDecimal size, String name, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/groups";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (size != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
    }

    if (name != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllGroupsValidateBeforeCall(
      BigDecimal page, BigDecimal size, String name, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(
          "Missing the required parameter 'page' when calling getAllGroups(Async)");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(
          "Missing the required parameter 'size' when calling getAllGroups(Async)");
    }

    okhttp3.Call localVarCall = getAllGroupsCall(page, size, name, _callback);
    return localVarCall;
  }

  /**
   * Get groups
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Group name keywords (optional)
   * @return GroupPage
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public GroupPage getAllGroups(BigDecimal page, BigDecimal size, String name) throws ApiException {
    ApiResponse<GroupPage> localVarResp = getAllGroupsWithHttpInfo(page, size, name);
    return localVarResp.getData();
  }

  /**
   * Get groups
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Group name keywords (optional)
   * @return ApiResponse&lt;GroupPage&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GroupPage> getAllGroupsWithHttpInfo(
      BigDecimal page, BigDecimal size, String name) throws ApiException {
    okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(page, size, name, null);
    Type localVarReturnType = new TypeToken<GroupPage>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get groups (asynchronously)
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Group name keywords (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllGroupsAsync(
      BigDecimal page, BigDecimal size, String name, final ApiCallback<GroupPage> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(page, size, name, _callback);
    Type localVarReturnType = new TypeToken<GroupPage>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllPersonsByGroupId
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param groupId Group id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id or persons with person_ids not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllPersonsByGroupIdCall(
      BigDecimal page, BigDecimal size, BigDecimal groupId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/groups/{group_id}/persons"
            .replaceAll(
                "\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (size != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllPersonsByGroupIdValidateBeforeCall(
      BigDecimal page, BigDecimal size, BigDecimal groupId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(
          "Missing the required parameter 'page' when calling getAllPersonsByGroupId(Async)");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(
          "Missing the required parameter 'size' when calling getAllPersonsByGroupId(Async)");
    }

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          "Missing the required parameter 'groupId' when calling getAllPersonsByGroupId(Async)");
    }

    okhttp3.Call localVarCall = getAllPersonsByGroupIdCall(page, size, groupId, _callback);
    return localVarCall;
  }

  /**
   * Get group persons
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param groupId Group id (required)
   * @return GroupsGroupIdPersons
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id or persons with person_ids not found </td><td>  -  </td></tr>
   * </table>
   */
  public GroupsGroupIdPersons getAllPersonsByGroupId(
      BigDecimal page, BigDecimal size, BigDecimal groupId) throws ApiException {
    ApiResponse<GroupsGroupIdPersons> localVarResp =
        getAllPersonsByGroupIdWithHttpInfo(page, size, groupId);
    return localVarResp.getData();
  }

  /**
   * Get group persons
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param groupId Group id (required)
   * @return ApiResponse&lt;GroupsGroupIdPersons&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id or persons with person_ids not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GroupsGroupIdPersons> getAllPersonsByGroupIdWithHttpInfo(
      BigDecimal page, BigDecimal size, BigDecimal groupId) throws ApiException {
    okhttp3.Call localVarCall = getAllPersonsByGroupIdValidateBeforeCall(page, size, groupId, null);
    Type localVarReturnType = new TypeToken<GroupsGroupIdPersons>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get group persons (asynchronously)
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param groupId Group id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id or persons with person_ids not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllPersonsByGroupIdAsync(
      BigDecimal page,
      BigDecimal size,
      BigDecimal groupId,
      final ApiCallback<GroupsGroupIdPersons> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getAllPersonsByGroupIdValidateBeforeCall(page, size, groupId, _callback);
    Type localVarReturnType = new TypeToken<GroupsGroupIdPersons>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getGroup
   *
   * @param groupId Group id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getGroupCall(BigDecimal groupId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/groups/{group_id}"
            .replaceAll(
                "\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getGroupValidateBeforeCall(BigDecimal groupId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          "Missing the required parameter 'groupId' when calling getGroup(Async)");
    }

    okhttp3.Call localVarCall = getGroupCall(groupId, _callback);
    return localVarCall;
  }

  /**
   * Get group
   *
   * @param groupId Group id (required)
   * @return Group
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public Group getGroup(BigDecimal groupId) throws ApiException {
    ApiResponse<Group> localVarResp = getGroupWithHttpInfo(groupId);
    return localVarResp.getData();
  }

  /**
   * Get group
   *
   * @param groupId Group id (required)
   * @return ApiResponse&lt;Group&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Group> getGroupWithHttpInfo(BigDecimal groupId) throws ApiException {
    okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, null);
    Type localVarReturnType = new TypeToken<Group>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get group (asynchronously)
   *
   * @param groupId Group id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return group </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getGroupAsync(BigDecimal groupId, final ApiCallback<Group> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, _callback);
    Type localVarReturnType = new TypeToken<Group>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for updateGroup
   *
   * @param groupId Group id (required)
   * @param groupToCreate Metadata (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updateGroupCall(
      BigDecimal groupId, GroupToCreate groupToCreate, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = groupToCreate;

    // create path and map variables
    String localVarPath =
        "/api/groups/{group_id}"
            .replaceAll(
                "\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateGroupValidateBeforeCall(
      BigDecimal groupId, GroupToCreate groupToCreate, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          "Missing the required parameter 'groupId' when calling updateGroup(Async)");
    }

    // verify the required parameter 'groupToCreate' is set
    if (groupToCreate == null) {
      throw new ApiException(
          "Missing the required parameter 'groupToCreate' when calling updateGroup(Async)");
    }

    okhttp3.Call localVarCall = updateGroupCall(groupId, groupToCreate, _callback);
    return localVarCall;
  }

  /**
   * Update group
   *
   * @param groupId Group id (required)
   * @param groupToCreate Metadata (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void updateGroup(BigDecimal groupId, GroupToCreate groupToCreate) throws ApiException {
    updateGroupWithHttpInfo(groupId, groupToCreate);
  }

  /**
   * Update group
   *
   * @param groupId Group id (required)
   * @param groupToCreate Metadata (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> updateGroupWithHttpInfo(BigDecimal groupId, GroupToCreate groupToCreate)
      throws ApiException {
    okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, groupToCreate, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Update group (asynchronously)
   *
   * @param groupId Group id (required)
   * @param groupToCreate Metadata (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updateGroupAsync(
      BigDecimal groupId, GroupToCreate groupToCreate, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, groupToCreate, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for updatePersonsInGroup
   *
   * @param groupId Group id (required)
   * @param updateGroup Person ids to add or remove (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updatePersonsInGroupCall(
      BigDecimal groupId, UpdateGroup updateGroup, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = updateGroup;

    // create path and map variables
    String localVarPath =
        "/api/groups/{group_id}/persons"
            .replaceAll(
                "\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updatePersonsInGroupValidateBeforeCall(
      BigDecimal groupId, UpdateGroup updateGroup, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          "Missing the required parameter 'groupId' when calling updatePersonsInGroup(Async)");
    }

    // verify the required parameter 'updateGroup' is set
    if (updateGroup == null) {
      throw new ApiException(
          "Missing the required parameter 'updateGroup' when calling updatePersonsInGroup(Async)");
    }

    okhttp3.Call localVarCall = updatePersonsInGroupCall(groupId, updateGroup, _callback);
    return localVarCall;
  }

  /**
   * Add/remove persons to group
   *
   * @param groupId Group id (required)
   * @param updateGroup Person ids to add or remove (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void updatePersonsInGroup(BigDecimal groupId, UpdateGroup updateGroup)
      throws ApiException {
    updatePersonsInGroupWithHttpInfo(groupId, updateGroup);
  }

  /**
   * Add/remove persons to group
   *
   * @param groupId Group id (required)
   * @param updateGroup Person ids to add or remove (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> updatePersonsInGroupWithHttpInfo(
      BigDecimal groupId, UpdateGroup updateGroup) throws ApiException {
    okhttp3.Call localVarCall = updatePersonsInGroupValidateBeforeCall(groupId, updateGroup, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Add/remove persons to group (asynchronously)
   *
   * @param groupId Group id (required)
   * @param updateGroup Person ids to add or remove (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Group with group_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updatePersonsInGroupAsync(
      BigDecimal groupId, UpdateGroup updateGroup, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        updatePersonsInGroupValidateBeforeCall(groupId, updateGroup, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
}
