/*
 * Regula FaceSDK Web API
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.api;

import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;
import com.regula.facesdk.webclient.Pair;
import com.regula.facesdk.webclient.ProgressRequestBody;
import com.regula.facesdk.webclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.regula.facesdk.webclient.gen.model.Group;
import com.regula.facesdk.webclient.gen.model.GroupPage;
import com.regula.facesdk.webclient.gen.model.GroupToCreate;
import com.regula.facesdk.webclient.gen.model.OperationLog;
import com.regula.facesdk.webclient.gen.model.PersonsPage;
import java.util.UUID;
import com.regula.facesdk.webclient.gen.model.UpdateGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGroup
     * @param groupToCreate Request body for the group to create. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(GroupToCreate groupToCreate, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupToCreate;

        // create path and map variables
        String localVarPath = "/api/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(GroupToCreate groupToCreate, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupToCreate' is set
        if (groupToCreate == null) {
            throw new ApiException("Missing the required parameter 'groupToCreate' when calling createGroup(Async)");
        }
        

        okhttp3.Call localVarCall = createGroupCall(groupToCreate, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Create group
     * 
     * @param groupToCreate Request body for the group to create. (required)
     * @param xRequestID Request header label. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public Group createGroup(GroupToCreate groupToCreate, String xRequestID) throws ApiException {
        ApiResponse<Group> localVarResp = createGroupWithHttpInfo(groupToCreate, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Create group
     * 
     * @param groupToCreate Request body for the group to create. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> createGroupWithHttpInfo(GroupToCreate groupToCreate, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupToCreate, xRequestID, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create group (asynchronously)
     * 
     * @param groupToCreate Request body for the group to create. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(GroupToCreate groupToCreate, String xRequestID, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupToCreate, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(UUID groupId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(UUID groupId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupCall(groupId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Delete group
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroup(UUID groupId, String xRequestID) throws ApiException {
        deleteGroupWithHttpInfo(groupId, xRequestID);
    }

    /**
     * Delete group
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(UUID groupId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete group (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(UUID groupId, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGroups
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsCall(Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGroupsValidateBeforeCall(Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllGroupsCall(page, size, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get groups
     * 
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return GroupPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public GroupPage getAllGroups(Integer page, Integer size, String xRequestID) throws ApiException {
        ApiResponse<GroupPage> localVarResp = getAllGroupsWithHttpInfo(page, size, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get groups
     * 
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;GroupPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPage> getAllGroupsWithHttpInfo(Integer page, Integer size, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(page, size, xRequestID, null);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get groups (asynchronously)
     * 
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsAsync(Integer page, Integer size, String xRequestID, final ApiCallback<GroupPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGroupsValidateBeforeCall(page, size, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPersonsByGroupId
     * @param groupId Group ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId or persons with the personIds are not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonsByGroupIdCall(UUID groupId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/persons"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPersonsByGroupIdValidateBeforeCall(UUID groupId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getAllPersonsByGroupId(Async)");
        }
        

        okhttp3.Call localVarCall = getAllPersonsByGroupIdCall(groupId, page, size, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get group persons
     * 
     * @param groupId Group ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return PersonsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId or persons with the personIds are not found. </td><td>  -  </td></tr>
     </table>
     */
    public PersonsPage getAllPersonsByGroupId(UUID groupId, Integer page, Integer size, String xRequestID) throws ApiException {
        ApiResponse<PersonsPage> localVarResp = getAllPersonsByGroupIdWithHttpInfo(groupId, page, size, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get group persons
     * 
     * @param groupId Group ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;PersonsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId or persons with the personIds are not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonsPage> getAllPersonsByGroupIdWithHttpInfo(UUID groupId, Integer page, Integer size, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getAllPersonsByGroupIdValidateBeforeCall(groupId, page, size, xRequestID, null);
        Type localVarReturnType = new TypeToken<PersonsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group persons (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId or persons with the personIds are not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonsByGroupIdAsync(UUID groupId, Integer page, Integer size, String xRequestID, final ApiCallback<PersonsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPersonsByGroupIdValidateBeforeCall(groupId, page, size, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<PersonsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(UUID groupId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(UUID groupId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupCall(groupId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get group
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Group getGroup(UUID groupId, String xRequestID) throws ApiException {
        ApiResponse<Group> localVarResp = getGroupWithHttpInfo(groupId, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get group
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getGroupWithHttpInfo(UUID groupId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, xRequestID, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return group. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(UUID groupId, String xRequestID, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param groupId Group ID. (required)
     * @param groupToCreate Request body for the group to update. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(UUID groupId, GroupToCreate groupToCreate, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupToCreate;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(UUID groupId, GroupToCreate groupToCreate, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'groupToCreate' is set
        if (groupToCreate == null) {
            throw new ApiException("Missing the required parameter 'groupToCreate' when calling updateGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupCall(groupId, groupToCreate, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Update group
     * 
     * @param groupId Group ID. (required)
     * @param groupToCreate Request body for the group to update. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroup(UUID groupId, GroupToCreate groupToCreate, String xRequestID) throws ApiException {
        updateGroupWithHttpInfo(groupId, groupToCreate, xRequestID);
    }

    /**
     * Update group
     * 
     * @param groupId Group ID. (required)
     * @param groupToCreate Request body for the group to update. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupWithHttpInfo(UUID groupId, GroupToCreate groupToCreate, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, groupToCreate, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update group (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param groupToCreate Request body for the group to update. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(UUID groupId, GroupToCreate groupToCreate, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, groupToCreate, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePersonsInGroup
     * @param groupId Group ID. (required)
     * @param updateGroup Request body for person IDs to add or remove. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonsInGroupCall(UUID groupId, UpdateGroup updateGroup, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroup;

        // create path and map variables
        String localVarPath = "/api/groups/{groupId}/persons"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonsInGroupValidateBeforeCall(UUID groupId, UpdateGroup updateGroup, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updatePersonsInGroup(Async)");
        }
        
        // verify the required parameter 'updateGroup' is set
        if (updateGroup == null) {
            throw new ApiException("Missing the required parameter 'updateGroup' when calling updatePersonsInGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updatePersonsInGroupCall(groupId, updateGroup, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Add/remove persons to group
     * 
     * @param groupId Group ID. (required)
     * @param updateGroup Request body for person IDs to add or remove. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updatePersonsInGroup(UUID groupId, UpdateGroup updateGroup, String xRequestID) throws ApiException {
        updatePersonsInGroupWithHttpInfo(groupId, updateGroup, xRequestID);
    }

    /**
     * Add/remove persons to group
     * 
     * @param groupId Group ID. (required)
     * @param updateGroup Request body for person IDs to add or remove. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePersonsInGroupWithHttpInfo(UUID groupId, UpdateGroup updateGroup, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = updatePersonsInGroupValidateBeforeCall(groupId, updateGroup, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add/remove persons to group (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param updateGroup Request body for person IDs to add or remove. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with the groupId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonsInGroupAsync(UUID groupId, UpdateGroup updateGroup, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonsInGroupValidateBeforeCall(groupId, updateGroup, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
