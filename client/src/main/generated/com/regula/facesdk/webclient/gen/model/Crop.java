/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.facesdk.webclient.gen.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Crop */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Crop {
  public static final String SERIALIZED_NAME_TYPE = "type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private FaceAlignTypeQuality type;

  public static final String SERIALIZED_NAME_PAD_COLOR = "padColor";

  @SerializedName(SERIALIZED_NAME_PAD_COLOR)
  private List<Integer> padColor = null;

  public static final String SERIALIZED_NAME_SIZE = "size";

  @SerializedName(SERIALIZED_NAME_SIZE)
  private List<Integer> size = null;

  public static final String SERIALIZED_NAME_RETURN_ORIGINAL_RECT = "returnOriginalRect";

  @SerializedName(SERIALIZED_NAME_RETURN_ORIGINAL_RECT)
  private Boolean returnOriginalRect;

  public Crop type(FaceAlignTypeQuality type) {

    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public FaceAlignTypeQuality getType() {
    return type;
  }

  public void setType(FaceAlignTypeQuality type) {
    this.type = type;
  }

  public Crop padColor(List<Integer> padColor) {

    this.padColor = padColor;
    return this;
  }

  public Crop addPadColorItem(Integer padColorItem) {
    if (this.padColor == null) {
      this.padColor = new ArrayList<Integer>();
    }
    this.padColor.add(padColorItem);
    return this;
  }

  /**
   * Get padColor
   *
   * @return padColor
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[128,128,128]", value = "")
  public List<Integer> getPadColor() {
    return padColor;
  }

  public void setPadColor(List<Integer> padColor) {
    this.padColor = padColor;
  }

  public Crop size(List<Integer> size) {

    this.size = size;
    return this;
  }

  public Crop addSizeItem(Integer sizeItem) {
    if (this.size == null) {
      this.size = new ArrayList<Integer>();
    }
    this.size.add(sizeItem);
    return this;
  }

  /**
   * The resize value in case type matches this value. It it doesn&#39;t match, no resize is done.
   *
   * @return size
   */
  @javax.annotation.Nullable
  @ApiModelProperty(
      example = "[300,400]",
      value =
          "The resize value in case type matches this value. It it doesn't match, no resize is done.")
  public List<Integer> getSize() {
    return size;
  }

  public void setSize(List<Integer> size) {
    this.size = size;
  }

  public Crop returnOriginalRect(Boolean returnOriginalRect) {

    this.returnOriginalRect = returnOriginalRect;
    return this;
  }

  /**
   * Get returnOriginalRect
   *
   * @return returnOriginalRect
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")
  public Boolean getReturnOriginalRect() {
    return returnOriginalRect;
  }

  public void setReturnOriginalRect(Boolean returnOriginalRect) {
    this.returnOriginalRect = returnOriginalRect;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crop crop = (Crop) o;
    return Objects.equals(this.type, crop.type)
        && Objects.equals(this.padColor, crop.padColor)
        && Objects.equals(this.size, crop.size)
        && Objects.equals(this.returnOriginalRect, crop.returnOriginalRect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, padColor, size, returnOriginalRect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crop {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    padColor: ").append(toIndentedString(padColor)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    returnOriginalRect: ").append(toIndentedString(returnOriginalRect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
