/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.facesdk.webclient.gen.api;

import com.google.gson.reflect.TypeToken;
import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;
import com.regula.facesdk.webclient.Pair;
import com.regula.facesdk.webclient.gen.model.ImagePage;
import com.regula.facesdk.webclient.gen.model.Person;
import com.regula.facesdk.webclient.gen.model.PersonFields;
import com.regula.facesdk.webclient.gen.model.PersonsPage;
import com.regula.facesdk.webclient.gen.model.PersonsPersonId;
import com.regula.facesdk.webclient.gen.model.PersonsPersonIdGroups;
import com.regula.facesdk.webclient.gen.model.PersonsPersonIdImages;
import java.io.File;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
  private ApiClient localVarApiClient;

  public PersonApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PersonApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for addImageToPerson
   *
   * @param personId Person id (required)
   * @param body Image to add (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return image id </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call addImageToPersonCall(
      BigDecimal personId, PersonsPersonIdImages body, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}/images"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addImageToPersonValidateBeforeCall(
      BigDecimal personId, PersonsPersonIdImages body, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling addImageToPerson(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling addImageToPerson(Async)");
    }

    okhttp3.Call localVarCall = addImageToPersonCall(personId, body, _callback);
    return localVarCall;
  }

  /**
   * Add person image
   *
   * @param personId Person id (required)
   * @param body Image to add (required)
   * @return PersonsPersonIdImages
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return image id </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public PersonsPersonIdImages addImageToPerson(BigDecimal personId, PersonsPersonIdImages body)
      throws ApiException {
    ApiResponse<PersonsPersonIdImages> localVarResp = addImageToPersonWithHttpInfo(personId, body);
    return localVarResp.getData();
  }

  /**
   * Add person image
   *
   * @param personId Person id (required)
   * @param body Image to add (required)
   * @return ApiResponse&lt;PersonsPersonIdImages&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return image id </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<PersonsPersonIdImages> addImageToPersonWithHttpInfo(
      BigDecimal personId, PersonsPersonIdImages body) throws ApiException {
    okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, body, null);
    Type localVarReturnType = new TypeToken<PersonsPersonIdImages>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add person image (asynchronously)
   *
   * @param personId Person id (required)
   * @param body Image to add (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return image id </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call addImageToPersonAsync(
      BigDecimal personId,
      PersonsPersonIdImages body,
      final ApiCallback<PersonsPersonIdImages> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, body, _callback);
    Type localVarReturnType = new TypeToken<PersonsPersonIdImages>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for createPerson
   *
   * @param personFields Future person (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createPersonCall(PersonFields personFields, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = personFields;

    // create path and map variables
    String localVarPath = "/api/persons";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createPersonValidateBeforeCall(
      PersonFields personFields, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'personFields' is set
    if (personFields == null) {
      throw new ApiException(
          "Missing the required parameter 'personFields' when calling createPerson(Async)");
    }

    okhttp3.Call localVarCall = createPersonCall(personFields, _callback);
    return localVarCall;
  }

  /**
   * Create person
   *
   * @param personFields Future person (required)
   * @return Person
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public Person createPerson(PersonFields personFields) throws ApiException {
    ApiResponse<Person> localVarResp = createPersonWithHttpInfo(personFields);
    return localVarResp.getData();
  }

  /**
   * Create person
   *
   * @param personFields Future person (required)
   * @return ApiResponse&lt;Person&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Person> createPersonWithHttpInfo(PersonFields personFields)
      throws ApiException {
    okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, null);
    Type localVarReturnType = new TypeToken<Person>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create person (asynchronously)
   *
   * @param personFields Future person (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createPersonAsync(
      PersonFields personFields, final ApiCallback<Person> _callback) throws ApiException {

    okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, _callback);
    Type localVarReturnType = new TypeToken<Person>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for deleteImageOfPerson
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id or image with image_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteImageOfPersonCall(
      BigDecimal imageId, BigDecimal personId, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}/images/{image_id}"
            .replaceAll(
                "\\{" + "image_id" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteImageOfPersonValidateBeforeCall(
      BigDecimal imageId, BigDecimal personId, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      throw new ApiException(
          "Missing the required parameter 'imageId' when calling deleteImageOfPerson(Async)");
    }

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling deleteImageOfPerson(Async)");
    }

    okhttp3.Call localVarCall = deleteImageOfPersonCall(imageId, personId, _callback);
    return localVarCall;
  }

  /**
   * Delete image of person
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id or image with image_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void deleteImageOfPerson(BigDecimal imageId, BigDecimal personId) throws ApiException {
    deleteImageOfPersonWithHttpInfo(imageId, personId);
  }

  /**
   * Delete image of person
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id or image with image_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> deleteImageOfPersonWithHttpInfo(BigDecimal imageId, BigDecimal personId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete image of person (asynchronously)
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id or image with image_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteImageOfPersonAsync(
      BigDecimal imageId, BigDecimal personId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for deletePerson
   *
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deletePersonCall(BigDecimal personId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deletePersonValidateBeforeCall(
      BigDecimal personId, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling deletePerson(Async)");
    }

    okhttp3.Call localVarCall = deletePersonCall(personId, _callback);
    return localVarCall;
  }

  /**
   * Delete person
   *
   * @param personId Person id (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void deletePerson(BigDecimal personId) throws ApiException {
    deletePersonWithHttpInfo(personId);
  }

  /**
   * Delete person
   *
   * @param personId Person id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> deletePersonWithHttpInfo(BigDecimal personId) throws ApiException {
    okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete person (asynchronously)
   *
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deletePersonAsync(BigDecimal personId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllGroupsByPersonId
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllGroupsByPersonIdCall(
      BigDecimal page, BigDecimal size, BigDecimal personId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}/groups"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (size != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllGroupsByPersonIdValidateBeforeCall(
      BigDecimal page, BigDecimal size, BigDecimal personId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(
          "Missing the required parameter 'page' when calling getAllGroupsByPersonId(Async)");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(
          "Missing the required parameter 'size' when calling getAllGroupsByPersonId(Async)");
    }

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling getAllGroupsByPersonId(Async)");
    }

    okhttp3.Call localVarCall = getAllGroupsByPersonIdCall(page, size, personId, _callback);
    return localVarCall;
  }

  /**
   * Get person groups
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @return PersonsPersonIdGroups
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public PersonsPersonIdGroups getAllGroupsByPersonId(
      BigDecimal page, BigDecimal size, BigDecimal personId) throws ApiException {
    ApiResponse<PersonsPersonIdGroups> localVarResp =
        getAllGroupsByPersonIdWithHttpInfo(page, size, personId);
    return localVarResp.getData();
  }

  /**
   * Get person groups
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @return ApiResponse&lt;PersonsPersonIdGroups&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<PersonsPersonIdGroups> getAllGroupsByPersonIdWithHttpInfo(
      BigDecimal page, BigDecimal size, BigDecimal personId) throws ApiException {
    okhttp3.Call localVarCall =
        getAllGroupsByPersonIdValidateBeforeCall(page, size, personId, null);
    Type localVarReturnType = new TypeToken<PersonsPersonIdGroups>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get person groups (asynchronously)
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all groups </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllGroupsByPersonIdAsync(
      BigDecimal page,
      BigDecimal size,
      BigDecimal personId,
      final ApiCallback<PersonsPersonIdGroups> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getAllGroupsByPersonIdValidateBeforeCall(page, size, personId, _callback);
    Type localVarReturnType = new TypeToken<PersonsPersonIdGroups>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllImagesByPersonId
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all person images </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllImagesByPersonIdCall(
      BigDecimal page, BigDecimal size, BigDecimal personId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}/images"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (size != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllImagesByPersonIdValidateBeforeCall(
      BigDecimal page, BigDecimal size, BigDecimal personId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(
          "Missing the required parameter 'page' when calling getAllImagesByPersonId(Async)");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(
          "Missing the required parameter 'size' when calling getAllImagesByPersonId(Async)");
    }

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling getAllImagesByPersonId(Async)");
    }

    okhttp3.Call localVarCall = getAllImagesByPersonIdCall(page, size, personId, _callback);
    return localVarCall;
  }

  /**
   * Get person images
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @return ImagePage
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all person images </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ImagePage getAllImagesByPersonId(BigDecimal page, BigDecimal size, BigDecimal personId)
      throws ApiException {
    ApiResponse<ImagePage> localVarResp = getAllImagesByPersonIdWithHttpInfo(page, size, personId);
    return localVarResp.getData();
  }

  /**
   * Get person images
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @return ApiResponse&lt;ImagePage&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all person images </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ImagePage> getAllImagesByPersonIdWithHttpInfo(
      BigDecimal page, BigDecimal size, BigDecimal personId) throws ApiException {
    okhttp3.Call localVarCall =
        getAllImagesByPersonIdValidateBeforeCall(page, size, personId, null);
    Type localVarReturnType = new TypeToken<ImagePage>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get person images (asynchronously)
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return all person images </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllImagesByPersonIdAsync(
      BigDecimal page, BigDecimal size, BigDecimal personId, final ApiCallback<ImagePage> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getAllImagesByPersonIdValidateBeforeCall(page, size, personId, _callback);
    Type localVarReturnType = new TypeToken<ImagePage>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllPersons
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Person name keywords (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllPersonsCall(
      BigDecimal page, BigDecimal size, String name, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/persons";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (size != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
    }

    if (name != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllPersonsValidateBeforeCall(
      BigDecimal page, BigDecimal size, String name, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(
          "Missing the required parameter 'page' when calling getAllPersons(Async)");
    }

    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(
          "Missing the required parameter 'size' when calling getAllPersons(Async)");
    }

    okhttp3.Call localVarCall = getAllPersonsCall(page, size, name, _callback);
    return localVarCall;
  }

  /**
   * Get persons
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Person name keywords (optional)
   * @return PersonsPage
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public PersonsPage getAllPersons(BigDecimal page, BigDecimal size, String name)
      throws ApiException {
    ApiResponse<PersonsPage> localVarResp = getAllPersonsWithHttpInfo(page, size, name);
    return localVarResp.getData();
  }

  /**
   * Get persons
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Person name keywords (optional)
   * @return ApiResponse&lt;PersonsPage&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<PersonsPage> getAllPersonsWithHttpInfo(
      BigDecimal page, BigDecimal size, String name) throws ApiException {
    okhttp3.Call localVarCall = getAllPersonsValidateBeforeCall(page, size, name, null);
    Type localVarReturnType = new TypeToken<PersonsPage>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get persons (asynchronously)
   *
   * @param page Current page (required)
   * @param size Page size (required)
   * @param name Person name keywords (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return all persons </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllPersonsAsync(
      BigDecimal page, BigDecimal size, String name, final ApiCallback<PersonsPage> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getAllPersonsValidateBeforeCall(page, size, name, _callback);
    Type localVarReturnType = new TypeToken<PersonsPage>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getImageOfPerson
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return image </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getImageOfPersonCall(
      BigDecimal imageId, BigDecimal personId, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}/images/{image_id}"
            .replaceAll(
                "\\{" + "image_id" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json", "image/_*"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getImageOfPersonValidateBeforeCall(
      BigDecimal imageId, BigDecimal personId, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      throw new ApiException(
          "Missing the required parameter 'imageId' when calling getImageOfPerson(Async)");
    }

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling getImageOfPerson(Async)");
    }

    okhttp3.Call localVarCall = getImageOfPersonCall(imageId, personId, _callback);
    return localVarCall;
  }

  /**
   * Get person image by id
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return image </td><td>  -  </td></tr>
   * </table>
   */
  public File getImageOfPerson(BigDecimal imageId, BigDecimal personId) throws ApiException {
    ApiResponse<File> localVarResp = getImageOfPersonWithHttpInfo(imageId, personId);
    return localVarResp.getData();
  }

  /**
   * Get person image by id
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return image </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<File> getImageOfPersonWithHttpInfo(BigDecimal imageId, BigDecimal personId)
      throws ApiException {
    okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get person image by id (asynchronously)
   *
   * @param imageId Image id (required)
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 200 </td><td> Successful operation, return image </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getImageOfPersonAsync(
      BigDecimal imageId, BigDecimal personId, final ApiCallback<File> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getPerson
   *
   * @param personId Person id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPersonCall(BigDecimal personId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPersonValidateBeforeCall(BigDecimal personId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling getPerson(Async)");
    }

    okhttp3.Call localVarCall = getPersonCall(personId, _callback);
    return localVarCall;
  }

  /**
   * Get person
   *
   * @param personId Person id (required)
   * @return Person
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public Person getPerson(BigDecimal personId) throws ApiException {
    ApiResponse<Person> localVarResp = getPersonWithHttpInfo(personId);
    return localVarResp.getData();
  }

  /**
   * Get person
   *
   * @param personId Person id (required)
   * @return ApiResponse&lt;Person&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Person> getPersonWithHttpInfo(BigDecimal personId) throws ApiException {
    okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, null);
    Type localVarReturnType = new TypeToken<Person>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get person (asynchronously)
   *
   * @param personId Person id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return person </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPersonAsync(BigDecimal personId, final ApiCallback<Person> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, _callback);
    Type localVarReturnType = new TypeToken<Person>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for updatePerson
   *
   * @param personId Person id (required)
   * @param body Metadata (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updatePersonCall(
      BigDecimal personId, PersonsPersonId body, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/api/persons/{person_id}"
            .replaceAll(
                "\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updatePersonValidateBeforeCall(
      BigDecimal personId, PersonsPersonId body, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'personId' is set
    if (personId == null) {
      throw new ApiException(
          "Missing the required parameter 'personId' when calling updatePerson(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling updatePerson(Async)");
    }

    okhttp3.Call localVarCall = updatePersonCall(personId, body, _callback);
    return localVarCall;
  }

  /**
   * Update person
   *
   * @param personId Person id (required)
   * @param body Metadata (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public void updatePerson(BigDecimal personId, PersonsPersonId body) throws ApiException {
    updatePersonWithHttpInfo(personId, body);
  }

  /**
   * Update person
   *
   * @param personId Person id (required)
   * @param body Metadata (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> updatePersonWithHttpInfo(BigDecimal personId, PersonsPersonId body)
      throws ApiException {
    okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, body, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Update person (asynchronously)
   *
   * @param personId Person id (required)
   * @param body Metadata (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Successful operation, return nothing </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Person with person_id not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call updatePersonAsync(
      BigDecimal personId, PersonsPersonId body, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, body, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
}
