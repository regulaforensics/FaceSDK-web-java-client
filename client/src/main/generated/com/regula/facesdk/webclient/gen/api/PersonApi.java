/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 4.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.api;

import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;
import com.regula.facesdk.webclient.Pair;
import com.regula.facesdk.webclient.ProgressRequestBody;
import com.regula.facesdk.webclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.regula.facesdk.webclient.gen.model.GroupPage;
import com.regula.facesdk.webclient.gen.model.Image;
import com.regula.facesdk.webclient.gen.model.ImageFields;
import com.regula.facesdk.webclient.gen.model.ImagePage;
import com.regula.facesdk.webclient.gen.model.OperationLog;
import com.regula.facesdk.webclient.gen.model.Person;
import com.regula.facesdk.webclient.gen.model.PersonFields;
import com.regula.facesdk.webclient.gen.model.PersonsPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addImageToPerson
     * @param personId Person ID. (required)
     * @param imageFields Image to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageToPersonCall(Integer personId, ImageFields imageFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageFields;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}/images"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageToPersonValidateBeforeCall(Integer personId, ImageFields imageFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling addImageToPerson(Async)");
        }
        
        // verify the required parameter 'imageFields' is set
        if (imageFields == null) {
            throw new ApiException("Missing the required parameter 'imageFields' when calling addImageToPerson(Async)");
        }
        

        okhttp3.Call localVarCall = addImageToPersonCall(personId, imageFields, _callback);
        return localVarCall;

    }

    /**
     * Add person image
     * 
     * @param personId Person ID. (required)
     * @param imageFields Image to add. (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Image addImageToPerson(Integer personId, ImageFields imageFields) throws ApiException {
        ApiResponse<Image> localVarResp = addImageToPersonWithHttpInfo(personId, imageFields);
        return localVarResp.getData();
    }

    /**
     * Add person image
     * 
     * @param personId Person ID. (required)
     * @param imageFields Image to add. (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> addImageToPersonWithHttpInfo(Integer personId, ImageFields imageFields) throws ApiException {
        okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, imageFields, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add person image (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param imageFields Image to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageToPersonAsync(Integer personId, ImageFields imageFields, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, imageFields, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPerson
     * @param personFields  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonCall(PersonFields personFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personFields;

        // create path and map variables
        String localVarPath = "/api/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPersonValidateBeforeCall(PersonFields personFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personFields' is set
        if (personFields == null) {
            throw new ApiException("Missing the required parameter 'personFields' when calling createPerson(Async)");
        }
        

        okhttp3.Call localVarCall = createPersonCall(personFields, _callback);
        return localVarCall;

    }

    /**
     * Create person
     * 
     * @param personFields  (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public Person createPerson(PersonFields personFields) throws ApiException {
        ApiResponse<Person> localVarResp = createPersonWithHttpInfo(personFields);
        return localVarResp.getData();
    }

    /**
     * Create person
     * 
     * @param personFields  (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> createPersonWithHttpInfo(PersonFields personFields) throws ApiException {
        okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create person (asynchronously)
     * 
     * @param personFields  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonAsync(PersonFields personFields, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageOfPerson
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id or image with the image_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageOfPersonCall(Integer imageId, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}/images/{image_id}"
            .replaceAll("\\{" + "image_id" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageOfPersonValidateBeforeCall(Integer imageId, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteImageOfPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deleteImageOfPerson(Async)");
        }
        

        okhttp3.Call localVarCall = deleteImageOfPersonCall(imageId, personId, _callback);
        return localVarCall;

    }

    /**
     * Delete image of person
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id or image with the image_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageOfPerson(Integer imageId, Integer personId) throws ApiException {
        deleteImageOfPersonWithHttpInfo(imageId, personId);
    }

    /**
     * Delete image of person
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id or image with the image_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageOfPersonWithHttpInfo(Integer imageId, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete image of person (asynchronously)
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id or image with the image_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageOfPersonAsync(Integer imageId, Integer personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePerson
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deletePerson(Async)");
        }
        

        okhttp3.Call localVarCall = deletePersonCall(personId, _callback);
        return localVarCall;

    }

    /**
     * Delete person
     * 
     * @param personId Person ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePerson(Integer personId) throws ApiException {
        deletePersonWithHttpInfo(personId);
    }

    /**
     * Delete person
     * 
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePersonWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonAsync(Integer personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGroupsByPersonId
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsByPersonIdCall(Integer page, Integer size, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}/groups"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGroupsByPersonIdValidateBeforeCall(Integer page, Integer size, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllGroupsByPersonId(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getAllGroupsByPersonId(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getAllGroupsByPersonId(Async)");
        }
        

        okhttp3.Call localVarCall = getAllGroupsByPersonIdCall(page, size, personId, _callback);
        return localVarCall;

    }

    /**
     * Get person groups
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @return GroupPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GroupPage getAllGroupsByPersonId(Integer page, Integer size, Integer personId) throws ApiException {
        ApiResponse<GroupPage> localVarResp = getAllGroupsByPersonIdWithHttpInfo(page, size, personId);
        return localVarResp.getData();
    }

    /**
     * Get person groups
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;GroupPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPage> getAllGroupsByPersonIdWithHttpInfo(Integer page, Integer size, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getAllGroupsByPersonIdValidateBeforeCall(page, size, personId, null);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person groups (asynchronously)
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsByPersonIdAsync(Integer page, Integer size, Integer personId, final ApiCallback<GroupPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGroupsByPersonIdValidateBeforeCall(page, size, personId, _callback);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllImagesByPersonId
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllImagesByPersonIdCall(Integer page, Integer size, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}/images"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllImagesByPersonIdValidateBeforeCall(Integer page, Integer size, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllImagesByPersonId(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getAllImagesByPersonId(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getAllImagesByPersonId(Async)");
        }
        

        okhttp3.Call localVarCall = getAllImagesByPersonIdCall(page, size, personId, _callback);
        return localVarCall;

    }

    /**
     * Get person images
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @return ImagePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ImagePage getAllImagesByPersonId(Integer page, Integer size, Integer personId) throws ApiException {
        ApiResponse<ImagePage> localVarResp = getAllImagesByPersonIdWithHttpInfo(page, size, personId);
        return localVarResp.getData();
    }

    /**
     * Get person images
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;ImagePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePage> getAllImagesByPersonIdWithHttpInfo(Integer page, Integer size, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getAllImagesByPersonIdValidateBeforeCall(page, size, personId, null);
        Type localVarReturnType = new TypeToken<ImagePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person images (asynchronously)
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllImagesByPersonIdAsync(Integer page, Integer size, Integer personId, final ApiCallback<ImagePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllImagesByPersonIdValidateBeforeCall(page, size, personId, _callback);
        Type localVarReturnType = new TypeToken<ImagePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPersons
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonsCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPersonsValidateBeforeCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllPersons(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getAllPersons(Async)");
        }
        

        okhttp3.Call localVarCall = getAllPersonsCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Get persons
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @return PersonsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public PersonsPage getAllPersons(Integer page, Integer size) throws ApiException {
        ApiResponse<PersonsPage> localVarResp = getAllPersonsWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Get persons
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @return ApiResponse&lt;PersonsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonsPage> getAllPersonsWithHttpInfo(Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getAllPersonsValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PersonsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get persons (asynchronously)
     * 
     * @param page The page number to get a list of persons or groups. (required)
     * @param size The page size with a list of persons or groups, items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation, return all persons. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonsAsync(Integer page, Integer size, final ApiCallback<PersonsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPersonsValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PersonsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageOfPerson
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageOfPersonCall(Integer imageId, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}/images/{image_id}"
            .replaceAll("\\{" + "image_id" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "image/_*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageOfPersonValidateBeforeCall(Integer imageId, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageOfPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getImageOfPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getImageOfPersonCall(imageId, personId, _callback);
        return localVarCall;

    }

    /**
     * Get person image by id
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public File getImageOfPerson(Integer imageId, Integer personId) throws ApiException {
        ApiResponse<File> localVarResp = getImageOfPersonWithHttpInfo(imageId, personId);
        return localVarResp.getData();
    }

    /**
     * Get person image by id
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getImageOfPersonWithHttpInfo(Integer imageId, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by id (asynchronously)
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageOfPersonAsync(Integer imageId, Integer personId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPerson
     * @param personId Person ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getPersonCall(personId, _callback);
        return localVarCall;

    }

    /**
     * Get person
     * 
     * @param personId Person ID. (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Person getPerson(Integer personId) throws ApiException {
        ApiResponse<Person> localVarResp = getPersonWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * Get person
     * 
     * @param personId Person ID. (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> getPersonWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonAsync(Integer personId, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePerson
     * @param personId Person ID. (required)
     * @param personFields Request body for the Person to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonCall(Integer personId, PersonFields personFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personFields;

        // create path and map variables
        String localVarPath = "/api/persons/{person_id}"
            .replaceAll("\\{" + "person_id" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonValidateBeforeCall(Integer personId, PersonFields personFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updatePerson(Async)");
        }
        
        // verify the required parameter 'personFields' is set
        if (personFields == null) {
            throw new ApiException("Missing the required parameter 'personFields' when calling updatePerson(Async)");
        }
        

        okhttp3.Call localVarCall = updatePersonCall(personId, personFields, _callback);
        return localVarCall;

    }

    /**
     * Update person
     * 
     * @param personId Person ID. (required)
     * @param personFields Request body for the Person to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updatePerson(Integer personId, PersonFields personFields) throws ApiException {
        updatePersonWithHttpInfo(personId, personFields);
    }

    /**
     * Update person
     * 
     * @param personId Person ID. (required)
     * @param personFields Request body for the Person to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePersonWithHttpInfo(Integer personId, PersonFields personFields) throws ApiException {
        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, personFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param personFields Request body for the Person to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the person_id is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonAsync(Integer personId, PersonFields personFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, personFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
