/*
 * Regula Face SDK Web API
 * <a href=\"https://regulaforensics.com/products/face-recognition-sdk/  \" target=\"_blank\">Regula Face SDK</a> is a cross-platform biometric verification solution for a digital identity verification process. The SDK enables convenient and reliable face capture on the client side (mobile, web, and desktop) and further processing on the client or server side.  The Face SDK includes the following features:  * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-detection\" target=\"_blank\">Face Detection</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-comparison-11\" target=\"_blank\">Face Match (1:1)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-identification-1n\" target=\"_blank\">Face Search (1:N)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#liveness-assessment\" target=\"_blank\">Liveness Assessment</a>  Here is the <a href=\"https://github.com/regulaforensics/FaceSDK-web-openapi  \" target=\"_blank\">OpenAPI specification on GitHub</a>.   ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.api;

import com.regula.facesdk.webclient.ApiCallback;
import com.regula.facesdk.webclient.ApiClient;
import com.regula.facesdk.webclient.ApiException;
import com.regula.facesdk.webclient.ApiResponse;
import com.regula.facesdk.webclient.Configuration;
import com.regula.facesdk.webclient.Pair;
import com.regula.facesdk.webclient.ProgressRequestBody;
import com.regula.facesdk.webclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.regula.facesdk.webclient.gen.model.AddImageToPersonRequest;
import com.regula.facesdk.webclient.gen.model.AddImageToPersonResponse;
import java.io.File;
import com.regula.facesdk.webclient.gen.model.GroupPage;
import com.regula.facesdk.webclient.gen.model.ImagePage;
import com.regula.facesdk.webclient.gen.model.OperationLog;
import com.regula.facesdk.webclient.gen.model.Person;
import com.regula.facesdk.webclient.gen.model.PersonFields;
import com.regula.facesdk.webclient.gen.model.PersonToUpdateFields;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addImageToPerson
     * @param personId Person ID. (required)
     * @param addImageToPersonRequest Image to add. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageToPersonCall(UUID personId, AddImageToPersonRequest addImageToPersonRequest, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addImageToPersonRequest;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}/images"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageToPersonValidateBeforeCall(UUID personId, AddImageToPersonRequest addImageToPersonRequest, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling addImageToPerson(Async)");
        }
        
        // verify the required parameter 'addImageToPersonRequest' is set
        if (addImageToPersonRequest == null) {
            throw new ApiException("Missing the required parameter 'addImageToPersonRequest' when calling addImageToPerson(Async)");
        }
        

        okhttp3.Call localVarCall = addImageToPersonCall(personId, addImageToPersonRequest, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Add person image
     * 
     * @param personId Person ID. (required)
     * @param addImageToPersonRequest Image to add. (required)
     * @param xRequestID Request header label. (optional)
     * @return AddImageToPersonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public AddImageToPersonResponse addImageToPerson(UUID personId, AddImageToPersonRequest addImageToPersonRequest, String xRequestID) throws ApiException {
        ApiResponse<AddImageToPersonResponse> localVarResp = addImageToPersonWithHttpInfo(personId, addImageToPersonRequest, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Add person image
     * 
     * @param personId Person ID. (required)
     * @param addImageToPersonRequest Image to add. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;AddImageToPersonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddImageToPersonResponse> addImageToPersonWithHttpInfo(UUID personId, AddImageToPersonRequest addImageToPersonRequest, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, addImageToPersonRequest, xRequestID, null);
        Type localVarReturnType = new TypeToken<AddImageToPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add person image (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param addImageToPersonRequest Image to add. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return image ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageToPersonAsync(UUID personId, AddImageToPersonRequest addImageToPersonRequest, String xRequestID, final ApiCallback<AddImageToPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageToPersonValidateBeforeCall(personId, addImageToPersonRequest, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<AddImageToPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPerson
     * @param personFields  (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonCall(PersonFields personFields, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personFields;

        // create path and map variables
        String localVarPath = "/api/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPersonValidateBeforeCall(PersonFields personFields, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personFields' is set
        if (personFields == null) {
            throw new ApiException("Missing the required parameter 'personFields' when calling createPerson(Async)");
        }
        

        okhttp3.Call localVarCall = createPersonCall(personFields, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Create person
     * 
     * @param personFields  (required)
     * @param xRequestID Request header label. (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public Person createPerson(PersonFields personFields, String xRequestID) throws ApiException {
        ApiResponse<Person> localVarResp = createPersonWithHttpInfo(personFields, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Create person
     * 
     * @param personFields  (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> createPersonWithHttpInfo(PersonFields personFields, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, xRequestID, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create person (asynchronously)
     * 
     * @param personFields  (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonAsync(PersonFields personFields, String xRequestID, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPersonValidateBeforeCall(personFields, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageOfPerson
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId or image with the imageId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageOfPersonCall(String imageId, UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}/images/{imageId}"
            .replaceAll("\\{" + "imageId" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageOfPersonValidateBeforeCall(String imageId, UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteImageOfPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deleteImageOfPerson(Async)");
        }
        

        okhttp3.Call localVarCall = deleteImageOfPersonCall(imageId, personId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Delete image of person
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId or image with the imageId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageOfPerson(String imageId, UUID personId, String xRequestID) throws ApiException {
        deleteImageOfPersonWithHttpInfo(imageId, personId, xRequestID);
    }

    /**
     * Delete image of person
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId or image with the imageId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageOfPersonWithHttpInfo(String imageId, UUID personId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete image of person (asynchronously)
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId or image with the imageId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageOfPersonAsync(String imageId, UUID personId, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageOfPersonValidateBeforeCall(imageId, personId, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePerson
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonCall(UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonValidateBeforeCall(UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deletePerson(Async)");
        }
        

        okhttp3.Call localVarCall = deletePersonCall(personId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Delete person
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePerson(UUID personId, String xRequestID) throws ApiException {
        deletePersonWithHttpInfo(personId, xRequestID);
    }

    /**
     * Delete person
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePersonWithHttpInfo(UUID personId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonAsync(UUID personId, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGroupsByPersonId
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsByPersonIdCall(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}/groups"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGroupsByPersonIdValidateBeforeCall(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getAllGroupsByPersonId(Async)");
        }
        

        okhttp3.Call localVarCall = getAllGroupsByPersonIdCall(personId, page, size, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get person groups
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return GroupPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GroupPage getAllGroupsByPersonId(UUID personId, Integer page, Integer size, String xRequestID) throws ApiException {
        ApiResponse<GroupPage> localVarResp = getAllGroupsByPersonIdWithHttpInfo(personId, page, size, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get person groups
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;GroupPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPage> getAllGroupsByPersonIdWithHttpInfo(UUID personId, Integer page, Integer size, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getAllGroupsByPersonIdValidateBeforeCall(personId, page, size, xRequestID, null);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person groups (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all groups. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGroupsByPersonIdAsync(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback<GroupPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGroupsByPersonIdValidateBeforeCall(personId, page, size, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<GroupPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllImagesByPersonId
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllImagesByPersonIdCall(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}/images"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllImagesByPersonIdValidateBeforeCall(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getAllImagesByPersonId(Async)");
        }
        

        okhttp3.Call localVarCall = getAllImagesByPersonIdCall(personId, page, size, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get person images
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return ImagePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ImagePage getAllImagesByPersonId(UUID personId, Integer page, Integer size, String xRequestID) throws ApiException {
        ApiResponse<ImagePage> localVarResp = getAllImagesByPersonIdWithHttpInfo(personId, page, size, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get person images
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;ImagePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePage> getAllImagesByPersonIdWithHttpInfo(UUID personId, Integer page, Integer size, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getAllImagesByPersonIdValidateBeforeCall(personId, page, size, xRequestID, null);
        Type localVarReturnType = new TypeToken<ImagePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person images (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param page The page number to get a list of persons or groups. (optional, default to 1)
     * @param size The page size with a list of persons or groups, items. (optional, default to 1000)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return all person images. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllImagesByPersonIdAsync(UUID personId, Integer page, Integer size, String xRequestID, final ApiCallback<ImagePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllImagesByPersonIdValidateBeforeCall(personId, page, size, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<ImagePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageOfPerson
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageOfPersonCall(String imageId, UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}/images/{imageId}"
            .replaceAll("\\{" + "imageId" + "\\}", localVarApiClient.escapeString(imageId.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json", "image/_*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageOfPersonValidateBeforeCall(String imageId, UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageOfPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getImageOfPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getImageOfPersonCall(imageId, personId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get person image by id
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public File getImageOfPerson(String imageId, UUID personId, String xRequestID) throws ApiException {
        ApiResponse<File> localVarResp = getImageOfPersonWithHttpInfo(imageId, personId, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get person image by id
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getImageOfPersonWithHttpInfo(String imageId, UUID personId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, xRequestID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person image by id (asynchronously)
     * 
     * @param imageId Image ID. (required)
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Successful operation, return image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageOfPersonAsync(String imageId, UUID personId, String xRequestID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageOfPersonValidateBeforeCall(imageId, personId, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPerson
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonCall(UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonValidateBeforeCall(UUID personId, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getPersonCall(personId, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Get person
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Person getPerson(UUID personId, String xRequestID) throws ApiException {
        ApiResponse<Person> localVarResp = getPersonWithHttpInfo(personId, xRequestID);
        return localVarResp.getData();
    }

    /**
     * Get person
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> getPersonWithHttpInfo(UUID personId, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, xRequestID, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return person. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonAsync(UUID personId, String xRequestID, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonValidateBeforeCall(personId, xRequestID, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePerson
     * @param personId Person ID. (required)
     * @param personToUpdateFields Request body for the Person to update. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonCall(UUID personId, PersonToUpdateFields personToUpdateFields, String xRequestID, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personToUpdateFields;

        // create path and map variables
        String localVarPath = "/api/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonValidateBeforeCall(UUID personId, PersonToUpdateFields personToUpdateFields, String xRequestID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updatePerson(Async)");
        }
        
        // verify the required parameter 'personToUpdateFields' is set
        if (personToUpdateFields == null) {
            throw new ApiException("Missing the required parameter 'personToUpdateFields' when calling updatePerson(Async)");
        }
        

        okhttp3.Call localVarCall = updatePersonCall(personId, personToUpdateFields, xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Update person
     * 
     * @param personId Person ID. (required)
     * @param personToUpdateFields Request body for the Person to update. (required)
     * @param xRequestID Request header label. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public void updatePerson(UUID personId, PersonToUpdateFields personToUpdateFields, String xRequestID) throws ApiException {
        updatePersonWithHttpInfo(personId, personToUpdateFields, xRequestID);
    }

    /**
     * Update person
     * 
     * @param personId Person ID. (required)
     * @param personToUpdateFields Request body for the Person to update. (required)
     * @param xRequestID Request header label. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePersonWithHttpInfo(UUID personId, PersonToUpdateFields personToUpdateFields, String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, personToUpdateFields, xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update person (asynchronously)
     * 
     * @param personId Person ID. (required)
     * @param personToUpdateFields Request body for the Person to update. (required)
     * @param xRequestID Request header label. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation, return nothing. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person with the personId is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonAsync(UUID personId, PersonToUpdateFields personToUpdateFields, String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, personToUpdateFields, xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
