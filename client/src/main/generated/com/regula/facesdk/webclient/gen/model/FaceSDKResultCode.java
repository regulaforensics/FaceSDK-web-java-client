/*
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 4.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Result codes from core lib.
 */
@JsonAdapter(FaceSDKResultCode.Adapter.class)
public enum FaceSDKResultCode {
  
  FACER_OK(0),
  
  FACER_NO_LICENSE(200),
  
  FACER_IS_NOT_INITIALIZED(201),
  
  FACER_COMMAND_IS_NOT_SUPPORTED(202),
  
  FACER_COMMAND_PARAMS_READ_ERROR(203),
  
  FACER_SEARCHER_INDEX_FILE_NOT_EXIST(204),
  
  FACER_SEARCHER_INDEX_FILE_READ_ERROR(205),
  
  FACER_SEARCHER_INDEX_FILE_DECRYPTION_ERROR(206),
  
  FACER_SEARCHER_INDEX_LOAD_ERROR(207),
  
  FACER_SEARCHER_WRONG_DESCRIPTOR_VERSION(208),
  
  FACER_SEARCHER_INDEX_FILE_ENCRYPTION_ERROR(209),
  
  FACER_SEARCHER_INDEX_FILE_SAVE_ERROR(210),
  
  FACER_SEARCHER_IMAGE_DECODE_ERROR(211),
  
  FACER_SEARCHER_ID_EXISTS_IN_INDEX(212),
  
  FACER_SEARCHER_ID_NOT_IN_INDEX(213),
  
  FACER_SEARCHER_NO_FACES(214),
  
  FACER_SEARCHER_DESCRIPTOR_EXTRACTOR_ERROR(215),
  
  FACER_SEARCHER_METADATA_READ_ERROR(216),
  
  FACER_SEARCHER_NO_SEARCH_LICENSE(217),
  
  FACER_SEARCHER_DESCRIPTOR_DECODE_ERROR(218),
  
  FACER_SEARCHER_DESCRIPTOR_WRONG_SIZE(219),
  
  FACER_SEARCHER_ZIP_IMAGE_READ_ERROR(220),
  
  FACER_SEARCHER_ZIP_META_READ_ERROR(221),
  
  FACER_SEARCHER_SIMILAR_PHOTOS_EXIST(222),
  
  FACER_SEARCHER_PERSON_ZIP_READ_ERROR(223),
  
  FACER_LESS_THAN_TWO_IMAGES_IN_REQUEST(224),
  
  FACER_SEARCHER_WRONG_ID(225),
  
  FACER_SEARCHER_ID_EXISTS_IN_DELETED(226),
  
  FACER_VIDEO_DECODE_ERROR(227),
  
  FACER_NOT_ENOUGH_FRAMES(228),
  
  FACER_OUTPUT_IS_NOT_DEFINED(229);

  private Integer value;

  FaceSDKResultCode(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FaceSDKResultCode fromValue(Integer value) {
    for (FaceSDKResultCode b : FaceSDKResultCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FaceSDKResultCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final FaceSDKResultCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FaceSDKResultCode read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return FaceSDKResultCode.fromValue(value);
    }
  }
}

