/*
 * Regula FaceSDK Web API
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facesdk.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Whether to return the Base64 of an aligned and cropped portrait in the &#x60;crop&#x60; field.
 */
@ApiModel(description = "Whether to return the Base64 of an aligned and cropped portrait in the `crop` field.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MatchRequestOutputImageParamsCrop {
  public static final String SERIALIZED_NAME_PAD_COLOR = "padColor";
  @SerializedName(SERIALIZED_NAME_PAD_COLOR)
  private List<Integer> padColor = null;

  public static final String SERIALIZED_NAME_RETURN_ORIGINAL_RECT = "returnOriginalRect";
  @SerializedName(SERIALIZED_NAME_RETURN_ORIGINAL_RECT)
  private Boolean returnOriginalRect;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private List<Integer> size = null;

  /**
   * The aspect ratio according to which face alignment is performed during face detection.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public MatchRequestOutputImageParamsCrop() { 
  }

  public MatchRequestOutputImageParamsCrop padColor(List<Integer> padColor) {
    
    this.padColor = padColor;
    return this;
  }

  public MatchRequestOutputImageParamsCrop addPadColorItem(Integer padColorItem) {
    if (this.padColor == null) {
      this.padColor = new ArrayList<Integer>();
    }
    this.padColor.add(padColorItem);
    return this;
  }

   /**
   * The RGB value of a color for filling background behind a person&#39;s silhouette and for aligning the image.
   * @return padColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The RGB value of a color for filling background behind a person's silhouette and for aligning the image.")

  public List<Integer> getPadColor() {
    return padColor;
  }


  public void setPadColor(List<Integer> padColor) {
    this.padColor = padColor;
  }


  public MatchRequestOutputImageParamsCrop returnOriginalRect(Boolean returnOriginalRect) {
    
    this.returnOriginalRect = returnOriginalRect;
    return this;
  }

   /**
   * Whether to return the coordinates of the rectangle with the face in the original image prepared for the face crop.
   * @return returnOriginalRect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to return the coordinates of the rectangle with the face in the original image prepared for the face crop.")

  public Boolean getReturnOriginalRect() {
    return returnOriginalRect;
  }


  public void setReturnOriginalRect(Boolean returnOriginalRect) {
    this.returnOriginalRect = returnOriginalRect;
  }


  public MatchRequestOutputImageParamsCrop size(List<Integer> size) {
    
    this.size = size;
    return this;
  }

  public MatchRequestOutputImageParamsCrop addSizeItem(Integer sizeItem) {
    if (this.size == null) {
      this.size = new ArrayList<Integer>();
    }
    this.size.add(sizeItem);
    return this;
  }

   /**
   * The resize value in case &#x60;type&#x60; matches this value. If it doesn&#39;t, no resize is performed.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The resize value in case `type` matches this value. If it doesn't, no resize is performed.")

  public List<Integer> getSize() {
    return size;
  }


  public void setSize(List<Integer> size) {
    this.size = size;
  }


  public MatchRequestOutputImageParamsCrop type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The aspect ratio according to which face alignment is performed during face detection.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The aspect ratio according to which face alignment is performed during face detection.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchRequestOutputImageParamsCrop matchRequestOutputImageParamsCrop = (MatchRequestOutputImageParamsCrop) o;
    return Objects.equals(this.padColor, matchRequestOutputImageParamsCrop.padColor) &&
        Objects.equals(this.returnOriginalRect, matchRequestOutputImageParamsCrop.returnOriginalRect) &&
        Objects.equals(this.size, matchRequestOutputImageParamsCrop.size) &&
        Objects.equals(this.type, matchRequestOutputImageParamsCrop.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(padColor, returnOriginalRect, size, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchRequestOutputImageParamsCrop {\n");
    sb.append("    padColor: ").append(toIndentedString(padColor)).append("\n");
    sb.append("    returnOriginalRect: ").append(toIndentedString(returnOriginalRect)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

